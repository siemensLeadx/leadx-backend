// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Context;

namespace Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220102170718_initDb")]
    partial class initDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasCharSet("utf8mb4", DelegationModes.ApplyToAll)
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.10");

            modelBuilder.Entity("Domain.Entities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(85)
                        .HasColumnType("char(85)");

                    b.Property<string>("Alias")
                        .HasMaxLength(85)
                        .HasColumnType("varchar(85)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasMaxLength(85)
                        .HasColumnType("varchar(85)");

                    b.Property<string>("NameAr")
                        .HasMaxLength(85)
                        .HasColumnType("varchar(85)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(85)
                        .HasColumnType("varchar(85)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("46362c4c-e900-475e-bf20-f15ee1f7bfc7"),
                            Alias = "ADMIN",
                            ConcurrencyStamp = "7eb425e8-5fbf-4b25-9895-57e5bfc434dc",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Admin",
                            NameAr = "مدير",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("c2f8bc0a-e683-4333-bd45-f243ea0668ed"),
                            Alias = "VIEW_ONLY",
                            ConcurrencyStamp = "ca502371-b205-41b7-ab64-d62697c361fc",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "View Only",
                            NameAr = "اطلاع فقط",
                            NormalizedName = "VIEW ONLY"
                        },
                        new
                        {
                            Id = new Guid("d92eef1a-1941-4266-92df-72d890a5b53a"),
                            Alias = "USER",
                            ConcurrencyStamp = "ec2c7cd5-6724-4dbd-96f8-f12a473a3fee",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "User",
                            NameAr = "مستخدم",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = new Guid("bf2d7d78-62b9-4e07-b530-05e855b2144d"),
                            Alias = "BLOCKED",
                            ConcurrencyStamp = "ec2c7cd5-6724-4dbd-96f8-f12a473a3fee",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Blocked",
                            NameAr = "محظور",
                            NormalizedName = "BLOCKED"
                        });
                });

            modelBuilder.Entity("Domain.Entities.AppRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(85)
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<Guid>("RoleId")
                        .HasMaxLength(85)
                        .HasColumnType("char(85)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Domain.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(85)
                        .HasColumnType("char(85)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasMaxLength(85)
                        .HasColumnType("varchar(85)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(85)
                        .HasColumnType("varchar(85)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(85)
                        .HasColumnType("varchar(85)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(85)
                        .HasColumnType("varchar(85)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("longtext");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(85)
                        .HasColumnType("varchar(85)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Entities.AppUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(85)
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasMaxLength(85)
                        .HasColumnType("char(85)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Domain.Entities.AppUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(85)
                        .HasColumnType("varchar(85)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(85)
                        .HasColumnType("varchar(85)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasMaxLength(85)
                        .HasColumnType("char(85)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Domain.Entities.AppUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(85)");

                    b.Property<Guid>("RoleId")
                        .HasMaxLength(85)
                        .HasColumnType("char(85)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Domain.Entities.AppUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasMaxLength(85)
                        .HasColumnType("char(85)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(85)
                        .HasColumnType("varchar(85)");

                    b.Property<string>("Name")
                        .HasMaxLength(85)
                        .HasColumnType("varchar(85)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Domain.Entities.BusinessOpportunityType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("NameEn")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.ToTable("BusinessOpportunityTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NameAr = "جهاز جديد",
                            NameEn = "New"
                        },
                        new
                        {
                            Id = 2,
                            NameAr = "استبدال جهاز قديم",
                            NameEn = "Replacement"
                        });
                });

            modelBuilder.Entity("Domain.Entities.CustomerStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("NameEn")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.ToTable("CustomerStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NameAr = "سيمنز",
                            NameEn = "Siemens"
                        },
                        new
                        {
                            Id = 2,
                            NameAr = "منافس",
                            NameEn = "Competitor"
                        },
                        new
                        {
                            Id = 3,
                            NameAr = "عميل جديد",
                            NameEn = "New customer"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Device", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeviceLanguage")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasDefaultValue("en-US");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Model")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Token")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(85)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("Domain.Entities.Lead", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int?>("BusinessOpportunityTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CurrentLeadStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CustomerDueDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CustomerStatusId")
                        .HasColumnType("int");

                    b.Property<string>("HospitalName")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LeadName")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<decimal?>("OrderedPrize")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal?>("PromotedPrize")
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("Region")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("RewardClassId")
                        .HasColumnType("int");

                    b.Property<int?>("RewardCriteriaId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(85)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessOpportunityTypeId");

                    b.HasIndex("CurrentLeadStatusId");

                    b.HasIndex("CustomerStatusId");

                    b.HasIndex("RewardClassId");

                    b.HasIndex("RewardCriteriaId");

                    b.HasIndex("UserId");

                    b.ToTable("Leads");
                });

            modelBuilder.Entity("Domain.Entities.LeadNeed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<long>("LeadId")
                        .HasColumnType("bigint");

                    b.Property<int>("NeededDeviceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LeadId");

                    b.HasIndex("NeededDeviceId");

                    b.ToTable("LeadNeeds");
                });

            modelBuilder.Entity("Domain.Entities.LeadStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("BackgroundColor")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("NameAr")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("NameEn")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("TextColor")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("LeadStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BackgroundColor = "#999999",
                            NameAr = "جديد",
                            NameEn = "New",
                            TextColor = "#000000"
                        },
                        new
                        {
                            Id = 2,
                            BackgroundColor = "#fdddcb",
                            NameAr = "تم التحقق",
                            NameEn = "Verified by DCE",
                            TextColor = "#cf4b00"
                        },
                        new
                        {
                            Id = 3,
                            BackgroundColor = "#cac8e0",
                            NameAr = "مؤكدة",
                            NameEn = "Confirmed",
                            TextColor = "#2b2483"
                        },
                        new
                        {
                            Id = 4,
                            BackgroundColor = "#c8e6e6",
                            NameAr = "تم الموافقة",
                            NameEn = "Approved",
                            TextColor = "#006f6f"
                        },
                        new
                        {
                            Id = 5,
                            BackgroundColor = "#f9bfc7",
                            NameAr = "مرفوضة",
                            NameEn = "Rejected",
                            TextColor = "#d9001d"
                        },
                        new
                        {
                            Id = 6,
                            BackgroundColor = "#ceeffb",
                            NameAr = "تم الترقية",
                            NameEn = "Promoted",
                            TextColor = "#3abfed"
                        },
                        new
                        {
                            Id = 7,
                            BackgroundColor = "#bfe6cd",
                            NameAr = "تم الطلب",
                            NameEn = "Order Booked",
                            TextColor = "#009a38"
                        });
                });

            modelBuilder.Entity("Domain.Entities.LeadStatusHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("char(85)");

                    b.Property<long>("LeadId")
                        .HasColumnType("bigint");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LeadId");

                    b.HasIndex("StatusId");

                    b.ToTable("LeadStatusHistory");
                });

            modelBuilder.Entity("Domain.Entities.NeededDevice", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("NameEn")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.HasKey("Id");

                    b.ToTable("NeededDevices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NameAr = "أجهزة العلاج المتقدم",
                            NameEn = "Advanced Therapy (AT)"
                        },
                        new
                        {
                            Id = 2,
                            NameAr = "أجهزة تصوير الرنين المغناطيسي",
                            NameEn = "Magnetic Resonance (MR)"
                        },
                        new
                        {
                            Id = 3,
                            NameAr = "أجهزة التصوير الجزيئي",
                            NameEn = "Molecular Imaging (MI)"
                        },
                        new
                        {
                            Id = 4,
                            NameAr = "أجهزة التصوير المقطعي",
                            NameEn = "Computed Tomography (CT)"
                        },
                        new
                        {
                            Id = 5,
                            NameAr = "أجهزة الأشعة السينية",
                            NameEn = "X-Ray (XP)"
                        },
                        new
                        {
                            Id = 6,
                            NameAr = "أجهزة الموجات فوق الصوتية",
                            NameEn = "Ultrasound (US)"
                        },
                        new
                        {
                            Id = 7,
                            NameAr = "الأنظمة الصحية الرقمية",
                            NameEn = "Digital Health (DH)"
                        },
                        new
                        {
                            Id = 8,
                            NameAr = "أنظمة معالجة الصور الرقمية",
                            NameEn = "SY"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("LeadId")
                        .HasColumnType("bigint");

                    b.Property<int>("LeadStatusId")
                        .HasColumnType("int");

                    b.Property<string>("MessageAr")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("MessageEn")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime>("SendOn")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(85)");

                    b.HasKey("Id");

                    b.HasIndex("LeadId");

                    b.HasIndex("LeadStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Domain.Entities.RewardClass", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("NameEn")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.ToTable("RewardClasses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NameAr = "بلاتينيوم",
                            NameEn = "Platinum"
                        },
                        new
                        {
                            Id = 2,
                            NameAr = "جولد",
                            NameEn = "Gold"
                        },
                        new
                        {
                            Id = 3,
                            NameAr = "سيلفر",
                            NameEn = "Silver"
                        });
                });

            modelBuilder.Entity("Domain.Entities.RewardCriteria", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<decimal?>("From")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("To")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.ToTable("RewardCriterias");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            To = 1000000m
                        },
                        new
                        {
                            Id = 2,
                            From = 1000000m,
                            To = 3000000m
                        },
                        new
                        {
                            Id = 3,
                            From = 3000000m,
                            To = 6000000m
                        },
                        new
                        {
                            Id = 4,
                            From = 6000000m
                        });
                });

            modelBuilder.Entity("Domain.Entities.RewardPrize", b =>
                {
                    b.Property<int>("RewardClassId")
                        .HasColumnType("int");

                    b.Property<int>("RewardCriteriaId")
                        .HasColumnType("int");

                    b.Property<decimal>("LeadOnlyPrize")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("LeadWithPOPrize")
                        .HasColumnType("decimal(8,2)");

                    b.HasKey("RewardClassId", "RewardCriteriaId");

                    b.HasIndex("RewardCriteriaId");

                    b.ToTable("RewardPrizes");

                    b.HasData(
                        new
                        {
                            RewardClassId = 1,
                            RewardCriteriaId = 1,
                            LeadOnlyPrize = 1500m,
                            LeadWithPOPrize = 3000m
                        },
                        new
                        {
                            RewardClassId = 1,
                            RewardCriteriaId = 2,
                            LeadOnlyPrize = 2000m,
                            LeadWithPOPrize = 4000m
                        },
                        new
                        {
                            RewardClassId = 1,
                            RewardCriteriaId = 3,
                            LeadOnlyPrize = 2500m,
                            LeadWithPOPrize = 5000m
                        },
                        new
                        {
                            RewardClassId = 1,
                            RewardCriteriaId = 4,
                            LeadOnlyPrize = 3000m,
                            LeadWithPOPrize = 6000m
                        },
                        new
                        {
                            RewardClassId = 2,
                            RewardCriteriaId = 1,
                            LeadOnlyPrize = 1000m,
                            LeadWithPOPrize = 2000m
                        },
                        new
                        {
                            RewardClassId = 2,
                            RewardCriteriaId = 2,
                            LeadOnlyPrize = 1500m,
                            LeadWithPOPrize = 3000m
                        },
                        new
                        {
                            RewardClassId = 2,
                            RewardCriteriaId = 3,
                            LeadOnlyPrize = 2000m,
                            LeadWithPOPrize = 4000m
                        },
                        new
                        {
                            RewardClassId = 2,
                            RewardCriteriaId = 4,
                            LeadOnlyPrize = 2500m,
                            LeadWithPOPrize = 5000m
                        },
                        new
                        {
                            RewardClassId = 3,
                            RewardCriteriaId = 1,
                            LeadOnlyPrize = 500m,
                            LeadWithPOPrize = 1000m
                        },
                        new
                        {
                            RewardClassId = 3,
                            RewardCriteriaId = 2,
                            LeadOnlyPrize = 1000m,
                            LeadWithPOPrize = 2000m
                        },
                        new
                        {
                            RewardClassId = 3,
                            RewardCriteriaId = 3,
                            LeadOnlyPrize = 1500m,
                            LeadWithPOPrize = 3000m
                        },
                        new
                        {
                            RewardClassId = 3,
                            RewardCriteriaId = 4,
                            LeadOnlyPrize = 2000m,
                            LeadWithPOPrize = 4000m
                        });
                });

            modelBuilder.Entity("Persistence.AuditTrail.Audit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AffectedColumns")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NewValues")
                        .HasColumnType("longtext");

                    b.Property<string>("OldValues")
                        .HasColumnType("longtext");

                    b.Property<string>("PrimaryKey")
                        .HasColumnType("longtext");

                    b.Property<string>("TableName")
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("Domain.Entities.AppRoleClaim", b =>
                {
                    b.HasOne("Domain.Entities.AppRole", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.AppUser", b =>
                {
                    b.OwnsOne("Domain.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("AppUserId")
                                .HasColumnType("char(85)");

                            b1.Property<string>("First")
                                .HasMaxLength(85)
                                .HasColumnType("varchar(85)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("Last")
                                .HasMaxLength(85)
                                .HasColumnType("varchar(85)")
                                .HasColumnName("LastName");

                            b1.HasKey("AppUserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("AppUserId");
                        });

                    b.Navigation("Name");
                });

            modelBuilder.Entity("Domain.Entities.AppUserClaim", b =>
                {
                    b.HasOne("Domain.Entities.AppUser", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.AppUserLogin", b =>
                {
                    b.HasOne("Domain.Entities.AppUser", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.AppUserRole", b =>
                {
                    b.HasOne("Domain.Entities.AppRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.AppUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.AppUserToken", b =>
                {
                    b.HasOne("Domain.Entities.AppUser", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Device", b =>
                {
                    b.HasOne("Domain.Entities.AppUser", "User")
                        .WithMany("Devices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Lead", b =>
                {
                    b.HasOne("Domain.Entities.BusinessOpportunityType", "BusinessOpportunityType")
                        .WithMany("Leads")
                        .HasForeignKey("BusinessOpportunityTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.LeadStatus", "CurrentLeadStatus")
                        .WithMany("Leads")
                        .HasForeignKey("CurrentLeadStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.CustomerStatus", "CustomerStatus")
                        .WithMany("Leads")
                        .HasForeignKey("CustomerStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.RewardClass", "RewardClass")
                        .WithMany()
                        .HasForeignKey("RewardClassId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.RewardCriteria", "RewardCriteria")
                        .WithMany()
                        .HasForeignKey("RewardCriteriaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.AppUser", "User")
                        .WithMany("Leads")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessOpportunityType");

                    b.Navigation("CurrentLeadStatus");

                    b.Navigation("CustomerStatus");

                    b.Navigation("RewardClass");

                    b.Navigation("RewardCriteria");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.LeadNeed", b =>
                {
                    b.HasOne("Domain.Entities.Lead", "Lead")
                        .WithMany("LeadNeeds")
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.NeededDevice", "NeededDevice")
                        .WithMany()
                        .HasForeignKey("NeededDeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lead");

                    b.Navigation("NeededDevice");
                });

            modelBuilder.Entity("Domain.Entities.LeadStatusHistory", b =>
                {
                    b.HasOne("Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Lead", "Lead")
                        .WithMany("StatusHistory")
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.LeadStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Lead");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Domain.Entities.Notification", b =>
                {
                    b.HasOne("Domain.Entities.Lead", "Lead")
                        .WithMany()
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.LeadStatus", "LeadStatus")
                        .WithMany()
                        .HasForeignKey("LeadStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.AppUser", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Lead");

                    b.Navigation("LeadStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.RewardPrize", b =>
                {
                    b.HasOne("Domain.Entities.RewardClass", "RewardClass")
                        .WithMany()
                        .HasForeignKey("RewardClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.RewardCriteria", "RewardCriteria")
                        .WithMany()
                        .HasForeignKey("RewardCriteriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RewardClass");

                    b.Navigation("RewardCriteria");
                });

            modelBuilder.Entity("Domain.Entities.AppRole", b =>
                {
                    b.Navigation("RoleClaims");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Domain.Entities.AppUser", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Devices");

                    b.Navigation("Leads");

                    b.Navigation("Logins");

                    b.Navigation("Notifications");

                    b.Navigation("Tokens");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Domain.Entities.BusinessOpportunityType", b =>
                {
                    b.Navigation("Leads");
                });

            modelBuilder.Entity("Domain.Entities.CustomerStatus", b =>
                {
                    b.Navigation("Leads");
                });

            modelBuilder.Entity("Domain.Entities.Lead", b =>
                {
                    b.Navigation("LeadNeeds");

                    b.Navigation("StatusHistory");
                });

            modelBuilder.Entity("Domain.Entities.LeadStatus", b =>
                {
                    b.Navigation("Leads");
                });
#pragma warning restore 612, 618
        }
    }
}
